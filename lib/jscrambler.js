'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _generateSignedParams = require('./generate-signed-params');

var _generateSignedParams2 = _interopRequireDefault(_generateSignedParams);

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

var _mutations = require('./mutations');

var _queries = require('./queries');

exports['default'] =
/** @lends jScramblerFacade */
{
  Client: _client2['default'],
  config: _config2['default'],
  generateSignedParams: _generateSignedParams2['default'],
  createApplication: function createApplication(client, data, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.createApplication)(data, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  duplicateApplication: function duplicateApplication(client, data, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.duplicateApplication)(data, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  removeApplication: function removeApplication(client, id) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.removeApplication)(id), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  removeProtection: function removeProtection(client, id, appId, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.removeProtection)(id, appId, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  updateApplication: function updateApplication(client, application, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.updateApplication)(application, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  getApplication: function getApplication(client, applicationId, fragments) {
    var deferred = _q2['default'].defer();
    client.get('/', (0, _queries.getApplication)(applicationId, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  getApplicationSource: function getApplicationSource(client, sourceId, fragments) {
    var deferred = _q2['default'].defer();
    client.get('/', (0, _queries.getApplicationSource)(sourceId, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  getApplicationProtections: function getApplicationProtections(client, applicationId, params, fragments) {
    var deferred = _q2['default'].defer();
    client.get('/', (0, _queries.getApplicationProtections)(applicationId, params, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  createTemplate: function createTemplate(client, template, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.createTemplate)(template, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  removeTemplate: function removeTemplate(client, id) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.removeTemplate)(id), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  getTemplates: function getTemplates(client, fragments) {
    var deferred = _q2['default'].defer();
    client.get('/', (0, _queries.getTemplates)(fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  getApplications: function getApplications(client, fragments) {
    var deferred = _q2['default'].defer();
    client.get('/', (0, _queries.getApplications)(fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  addApplicationSource: function addApplicationSource(client, applicationId, applicationSource, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.addApplicationSource)(applicationId, applicationSource, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  addApplicationSourceFromURL: function addApplicationSourceFromURL(client, applicationId, url, fragments) {
    var deferred = _q2['default'].defer();
    return getFileFromUrl(client, url).then(function (file) {
      client.post('/', (0, _mutations.addApplicationSource)(applicationId, file, fragments), responseHandler(deferred));
      return deferred.promise;
    }).then(errorHandler);
  },
  updateApplicationSource: function updateApplicationSource(client, applicationSource, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.updateApplicationSource)(applicationSource, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  removeSourceFromApplication: function removeSourceFromApplication(client, sourceId, applicationId, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.removeSourceFromApplication)(sourceId, applicationId, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  updateTemplate: function updateTemplate(client, template, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.updateTemplate)(template, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  },
  createApplicationProtection: function createApplicationProtection(client, applicationId, fragments) {
    var deferred = _q2['default'].defer();
    client.post('/', (0, _mutations.createApplicationProtection)(applicationId, fragments), responseHandler(deferred));
    return deferred.promise.then(errorHandler);
  }
};

function getFileFromUrl(client, url) {
  var deferred = _q2['default'].defer();
  _superagent2['default'].get(url).end(function (err, res) {
    var file;
    if (err) {
      deferred.reject(err);
    } else {
      file = {
        content: res.text,
        filename: _path2['default'].basename(url),
        extension: _path2['default'].extname(url).substr(1)
      };
      deferred.resolve(file);
    }
  });
  return deferred.promise;
}

function responseHandler(deferred) {
  return function (err, res) {
    var body = res.body;
    try {
      if (err) deferred.reject(err);else if (res.statusCode >= 400) {
        if (Buffer.isBuffer(body)) {
          deferred.reject(JSON.parse(body));
        } else {
          deferred.reject(body);
        }
      } else {
        if (Buffer.isBuffer(body)) {
          deferred.resolve(JSON.parse(body));
        } else {
          deferred.resolve(body);
        }
      }
    } catch (ex) {
      deferred.reject(body);
    }
  };
}

function errorHandler(res) {
  if (res.errors && res.errors.length) {
    res.errors.forEach(function (error) {
      console.error(error.message);
    });
  }

  return res;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,
