#!/usr/bin/env node
'use strict';

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _lodash = require('lodash.defaults');

var _lodash2 = _interopRequireDefault(_lodash);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config3 = require('../lib/config');

var _config4 = _interopRequireDefault(_config3);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _cli = require('../lib/cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

_commander2.default.version(require('../../package.json').version).usage('[options] <file ...>').option('-a, --access-key <accessKey>', 'Access key').option('-c, --config <config>', 'JScrambler configuration options').option('-H, --host <host>', 'Hostname').option('-i, --application-id <id>', 'Application ID').option('-o, --output-dir <dir>', 'Output directory').option('-p, --port <port>', 'Port').option('-C, --cwd <dir>', 'Current Working Directory').option('-s, --secret-key <secretKey>', 'Secret key').parse(process.argv);

var globSrc, filesSrc, config;

// If -c, --config file was provided
if (_commander2.default.config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(_path2.default.resolve(_commander2.default.config, '.'));
} else {
  config = {};
}

config.accessKey = _commander2.default.accessKey || (config.keys ? config.keys.accessKey : void 0);
config.secretKey = _commander2.default.secretKey || (config.keys ? config.keys.secretKey : void 0);
config.host = _commander2.default.host || config.host;
config.port = _commander2.default.port || config.port;
config.filesDest = _commander2.default.outputDir || config.filesDest;
config.applicationId = _commander2.default.applicationId || config.applicationId;
config.cwd = _commander2.default.cwd || config.cwd;

config = (0, _lodash2.default)(config, _config4.default);

globSrc = config.filesSrc;
// If src paths have been provided
if (_commander2.default.args.length > 0) {
  globSrc = _commander2.default.args;
}

if (globSrc && globSrc.length) {
  filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (var i = 0, l = globSrc.length; i < l; ++i) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)
    filesSrc = filesSrc.concat(_glob2.default.sync(globSrc[i], {
      dot: true
    }));
  }
}

var _config2 = config;
var applicationId = _config2.applicationId;
var accessKey = _config2.accessKey;
var secretKey = _config2.secretKey;
var filesDest = _config2.filesDest;
var host = _config2.host;
var port = _config2.port;
var applicationTypes = _config2.applicationTypes;
var languageSpecifications = _config2.languageSpecifications;
var areSubscribersOrdered = _config2.areSubscribersOrdered;
var cwd = _config2.cwd;
var _config2$sourceMaps = _config2.sourceMaps;
var sourceMaps = _config2$sourceMaps === undefined ? false : _config2$sourceMaps;


var params = (0, _cli.mergeAndParseParams)(_commander2.default, config.params);

// Go, go, go
_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return _lib2.default.protectAndDownload({
            keys: {
              accessKey: accessKey,
              secretKey: secretKey
            },
            host: host,
            port: port,
            applicationId: applicationId,
            filesSrc: filesSrc,
            filesDest: filesDest,
            params: params,
            applicationTypes: applicationTypes,
            languageSpecifications: languageSpecifications,
            areSubscribersOrdered: areSubscribersOrdered,
            cwd: cwd,
            sourceMaps: sourceMaps
          });

        case 3:
          _context.next = 9;
          break;

        case 5:
          _context.prev = 5;
          _context.t0 = _context['catch'](0);

          console.error(_context.t0);
          process.exit(1);

        case 9:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[0, 5]]);
}))();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vanNjcmFtYmxlciJdLCJuYW1lcyI6WyJ2ZXJzaW9uIiwicmVxdWlyZSIsInVzYWdlIiwib3B0aW9uIiwicGFyc2UiLCJwcm9jZXNzIiwiYXJndiIsImdsb2JTcmMiLCJmaWxlc1NyYyIsImNvbmZpZyIsInJlc29sdmUiLCJhY2Nlc3NLZXkiLCJrZXlzIiwic2VjcmV0S2V5IiwiaG9zdCIsInBvcnQiLCJmaWxlc0Rlc3QiLCJvdXRwdXREaXIiLCJhcHBsaWNhdGlvbklkIiwiY3dkIiwiYXJncyIsImxlbmd0aCIsImkiLCJsIiwiY29uY2F0Iiwic3luYyIsImRvdCIsImFwcGxpY2F0aW9uVHlwZXMiLCJsYW5ndWFnZVNwZWNpZmljYXRpb25zIiwiYXJlU3Vic2NyaWJlcnNPcmRlcmVkIiwic291cmNlTWFwcyIsInBhcmFtcyIsInByb3RlY3RBbmREb3dubG9hZCIsImNvbnNvbGUiLCJlcnJvciIsImV4aXQiXSwibWFwcGluZ3MiOiI7O0FBRUE7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLG9CQUNHQSxPQURILENBQ1dDLFFBQVEsb0JBQVIsRUFBOEJELE9BRHpDLEVBRUdFLEtBRkgsQ0FFUyxzQkFGVCxFQUdHQyxNQUhILENBR1UsOEJBSFYsRUFHMEMsWUFIMUMsRUFJR0EsTUFKSCxDQUlVLHVCQUpWLEVBSW1DLGtDQUpuQyxFQUtHQSxNQUxILENBS1UsbUJBTFYsRUFLK0IsVUFML0IsRUFNR0EsTUFOSCxDQU1VLDJCQU5WLEVBTXVDLGdCQU52QyxFQU9HQSxNQVBILENBT1Usd0JBUFYsRUFPb0Msa0JBUHBDLEVBUUdBLE1BUkgsQ0FRVSxtQkFSVixFQVErQixNQVIvQixFQVNHQSxNQVRILENBU1UsaUJBVFYsRUFTNkIsMkJBVDdCLEVBVUdBLE1BVkgsQ0FVVSw4QkFWVixFQVUwQyxZQVYxQyxFQVdHQyxLQVhILENBV1NDLFFBQVFDLElBWGpCOztBQWFBLElBQUlDLE9BQUosRUFBYUMsUUFBYixFQUF1QkMsTUFBdkI7O0FBRUE7QUFDQSxJQUFJLG9CQUFVQSxNQUFkLEVBQXNCO0FBQ3BCO0FBQ0E7QUFDQUEsV0FBU1IsUUFBUSxlQUFLUyxPQUFMLENBQWEsb0JBQVVELE1BQXZCLEVBQStCLEdBQS9CLENBQVIsQ0FBVDtBQUNELENBSkQsTUFJTztBQUNMQSxXQUFTLEVBQVQ7QUFDRDs7QUFFREEsT0FBT0UsU0FBUCxHQUFtQixvQkFBVUEsU0FBVixLQUF3QkYsT0FBT0csSUFBUCxHQUFjSCxPQUFPRyxJQUFQLENBQVlELFNBQTFCLEdBQXNDLEtBQUssQ0FBbkUsQ0FBbkI7QUFDQUYsT0FBT0ksU0FBUCxHQUFtQixvQkFBVUEsU0FBVixLQUF3QkosT0FBT0csSUFBUCxHQUFjSCxPQUFPRyxJQUFQLENBQVlDLFNBQTFCLEdBQXNDLEtBQUssQ0FBbkUsQ0FBbkI7QUFDQUosT0FBT0ssSUFBUCxHQUFjLG9CQUFVQSxJQUFWLElBQWtCTCxPQUFPSyxJQUF2QztBQUNBTCxPQUFPTSxJQUFQLEdBQWMsb0JBQVVBLElBQVYsSUFBa0JOLE9BQU9NLElBQXZDO0FBQ0FOLE9BQU9PLFNBQVAsR0FBbUIsb0JBQVVDLFNBQVYsSUFBdUJSLE9BQU9PLFNBQWpEO0FBQ0FQLE9BQU9TLGFBQVAsR0FBdUIsb0JBQVVBLGFBQVYsSUFBMkJULE9BQU9TLGFBQXpEO0FBQ0FULE9BQU9VLEdBQVAsR0FBYSxvQkFBVUEsR0FBVixJQUFpQlYsT0FBT1UsR0FBckM7O0FBRUFWLFNBQVMsc0JBQVNBLE1BQVQsbUJBQVQ7O0FBRUFGLFVBQVVFLE9BQU9ELFFBQWpCO0FBQ0E7QUFDQSxJQUFJLG9CQUFVWSxJQUFWLENBQWVDLE1BQWYsR0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0JkLFlBQVUsb0JBQVVhLElBQXBCO0FBQ0Q7O0FBRUQsSUFBSWIsV0FBV0EsUUFBUWMsTUFBdkIsRUFBK0I7QUFDN0JiLGFBQVcsRUFBWDtBQUNBO0FBQ0EsT0FBSyxJQUFJYyxJQUFJLENBQVIsRUFBV0MsSUFBSWhCLFFBQVFjLE1BQTVCLEVBQW9DQyxJQUFJQyxDQUF4QyxFQUEyQyxFQUFFRCxDQUE3QyxFQUFnRDtBQUM5QztBQUNBO0FBQ0FkLGVBQVdBLFNBQVNnQixNQUFULENBQWdCLGVBQUtDLElBQUwsQ0FBVWxCLFFBQVFlLENBQVIsQ0FBVixFQUFzQjtBQUMvQ0ksV0FBSztBQUQwQyxLQUF0QixDQUFoQixDQUFYO0FBR0Q7QUFDRjs7ZUFjR2pCLE07SUFYRlMsYSxZQUFBQSxhO0lBQ0FQLFMsWUFBQUEsUztJQUNBRSxTLFlBQUFBLFM7SUFDQUcsUyxZQUFBQSxTO0lBQ0FGLEksWUFBQUEsSTtJQUNBQyxJLFlBQUFBLEk7SUFDQVksZ0IsWUFBQUEsZ0I7SUFDQUMsc0IsWUFBQUEsc0I7SUFDQUMscUIsWUFBQUEscUI7SUFDQVYsRyxZQUFBQSxHO21DQUNBVyxVO0lBQUFBLFUsdUNBQWEsSzs7O0FBR2YsSUFBTUMsU0FBUyxtREFBK0J0QixPQUFPc0IsTUFBdEMsQ0FBZjs7QUFFQTtBQUNBLDBDQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBRVMsY0FDSEMsa0JBREcsQ0FDZ0I7QUFDbEJwQixrQkFBTTtBQUNKRCxrQ0FESTtBQUVKRTtBQUZJLGFBRFk7QUFLbEJDLHNCQUxrQjtBQU1sQkMsc0JBTmtCO0FBT2xCRyx3Q0FQa0I7QUFRbEJWLDhCQVJrQjtBQVNsQlEsZ0NBVGtCO0FBVWxCZSwwQkFWa0I7QUFXbEJKLDhDQVhrQjtBQVlsQkMsMERBWmtCO0FBYWxCQyx3REFia0I7QUFjbEJWLG9CQWRrQjtBQWVsQlc7QUFma0IsV0FEaEIsQ0FGVDs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQXFCR0csa0JBQVFDLEtBQVI7QUFDQTdCLGtCQUFROEIsSUFBUixDQUFhLENBQWI7O0FBdEJIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQUQiLCJmaWxlIjoianNjcmFtYmxlciIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcblxuaW1wb3J0IGNvbW1hbmRlciBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJ2xvZGFzaC5kZWZhdWx0cyc7XG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgX2NvbmZpZyBmcm9tICcuLi9saWIvY29uZmlnJztcbmltcG9ydCBqU2NyYW1ibGVyIGZyb20gJy4uL2xpYic7XG5pbXBvcnQge21lcmdlQW5kUGFyc2VQYXJhbXN9IGZyb20gJy4uL2xpYi9jbGknO1xuXG5jb21tYW5kZXJcbiAgLnZlcnNpb24ocmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbilcbiAgLnVzYWdlKCdbb3B0aW9uc10gPGZpbGUgLi4uPicpXG4gIC5vcHRpb24oJy1hLCAtLWFjY2Vzcy1rZXkgPGFjY2Vzc0tleT4nLCAnQWNjZXNzIGtleScpXG4gIC5vcHRpb24oJy1jLCAtLWNvbmZpZyA8Y29uZmlnPicsICdKU2NyYW1ibGVyIGNvbmZpZ3VyYXRpb24gb3B0aW9ucycpXG4gIC5vcHRpb24oJy1ILCAtLWhvc3QgPGhvc3Q+JywgJ0hvc3RuYW1lJylcbiAgLm9wdGlvbignLWksIC0tYXBwbGljYXRpb24taWQgPGlkPicsICdBcHBsaWNhdGlvbiBJRCcpXG4gIC5vcHRpb24oJy1vLCAtLW91dHB1dC1kaXIgPGRpcj4nLCAnT3V0cHV0IGRpcmVjdG9yeScpXG4gIC5vcHRpb24oJy1wLCAtLXBvcnQgPHBvcnQ+JywgJ1BvcnQnKVxuICAub3B0aW9uKCctQywgLS1jd2QgPGRpcj4nLCAnQ3VycmVudCBXb3JraW5nIERpcmVjdG9yeScpXG4gIC5vcHRpb24oJy1zLCAtLXNlY3JldC1rZXkgPHNlY3JldEtleT4nLCAnU2VjcmV0IGtleScpXG4gIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG52YXIgZ2xvYlNyYywgZmlsZXNTcmMsIGNvbmZpZztcblxuLy8gSWYgLWMsIC0tY29uZmlnIGZpbGUgd2FzIHByb3ZpZGVkXG5pZiAoY29tbWFuZGVyLmNvbmZpZykge1xuICAvLyBXZSdyZSB1c2luZyBgY29tbWFuZGVyYCAoQ0xJKSBhcyB0aGUgc291cmNlIG9mIGFsbCB0cnV0aHMsIGZhbGxpbmcgYmFjayB0b1xuICAvLyB0aGUgYGNvbmZpZ2AgcHJvdmlkZWQgYnkgdGhlIGZpbGUgcGFzc2VkIGFzIGFyZ3VtZW50XG4gIGNvbmZpZyA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKGNvbW1hbmRlci5jb25maWcsICcuJykpO1xufSBlbHNlIHtcbiAgY29uZmlnID0ge307XG59XG5cbmNvbmZpZy5hY2Nlc3NLZXkgPSBjb21tYW5kZXIuYWNjZXNzS2V5IHx8IChjb25maWcua2V5cyA/IGNvbmZpZy5rZXlzLmFjY2Vzc0tleSA6IHZvaWQgMCk7XG5jb25maWcuc2VjcmV0S2V5ID0gY29tbWFuZGVyLnNlY3JldEtleSB8fCAoY29uZmlnLmtleXMgPyBjb25maWcua2V5cy5zZWNyZXRLZXkgOiB2b2lkIDApO1xuY29uZmlnLmhvc3QgPSBjb21tYW5kZXIuaG9zdCB8fCBjb25maWcuaG9zdDtcbmNvbmZpZy5wb3J0ID0gY29tbWFuZGVyLnBvcnQgfHwgY29uZmlnLnBvcnQ7XG5jb25maWcuZmlsZXNEZXN0ID0gY29tbWFuZGVyLm91dHB1dERpciB8fCBjb25maWcuZmlsZXNEZXN0O1xuY29uZmlnLmFwcGxpY2F0aW9uSWQgPSBjb21tYW5kZXIuYXBwbGljYXRpb25JZCB8fCBjb25maWcuYXBwbGljYXRpb25JZDtcbmNvbmZpZy5jd2QgPSBjb21tYW5kZXIuY3dkIHx8IGNvbmZpZy5jd2Q7XG5cbmNvbmZpZyA9IGRlZmF1bHRzKGNvbmZpZywgX2NvbmZpZyk7XG5cbmdsb2JTcmMgPSBjb25maWcuZmlsZXNTcmM7XG4vLyBJZiBzcmMgcGF0aHMgaGF2ZSBiZWVuIHByb3ZpZGVkXG5pZiAoY29tbWFuZGVyLmFyZ3MubGVuZ3RoID4gMCkge1xuICBnbG9iU3JjID0gY29tbWFuZGVyLmFyZ3M7XG59XG5cbmlmIChnbG9iU3JjICYmIGdsb2JTcmMubGVuZ3RoKSB7XG4gIGZpbGVzU3JjID0gW107XG4gIC8vIEl0ZXJhdGUgYGdsb2JTcmNgIHRvIGJ1aWxkIGEgbGlzdCBvZiBzb3VyY2UgZmlsZXMgaW50byBgZmlsZXNTcmNgXG4gIGZvciAobGV0IGkgPSAwLCBsID0gZ2xvYlNyYy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAvLyBDYWxsaW5nIHN5bmMgYGdsb2JgIGJlY2F1c2UgYXN5bmMgaXMgcG9pbnRsZXNzIGZvciB0aGUgQ0xJIHVzZSBjYXNlXG4gICAgLy8gKGFzIG9mIG5vdyBhdCBsZWFzdClcbiAgICBmaWxlc1NyYyA9IGZpbGVzU3JjLmNvbmNhdChnbG9iLnN5bmMoZ2xvYlNyY1tpXSwge1xuICAgICAgZG90OiB0cnVlXG4gICAgfSkpO1xuICB9XG59XG5cbmNvbnN0IHtcbiAgYXBwbGljYXRpb25JZCxcbiAgYWNjZXNzS2V5LFxuICBzZWNyZXRLZXksXG4gIGZpbGVzRGVzdCxcbiAgaG9zdCxcbiAgcG9ydCxcbiAgYXBwbGljYXRpb25UeXBlcyxcbiAgbGFuZ3VhZ2VTcGVjaWZpY2F0aW9ucyxcbiAgYXJlU3Vic2NyaWJlcnNPcmRlcmVkLFxuICBjd2QsXG4gIHNvdXJjZU1hcHMgPSBmYWxzZVxufSA9IGNvbmZpZztcblxuY29uc3QgcGFyYW1zID0gbWVyZ2VBbmRQYXJzZVBhcmFtcyhjb21tYW5kZXIsIGNvbmZpZy5wYXJhbXMpO1xuXG4vLyBHbywgZ28sIGdvXG4oYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGF3YWl0IGpTY3JhbWJsZXJcbiAgICAgIC5wcm90ZWN0QW5kRG93bmxvYWQoe1xuICAgICAgICBrZXlzOiB7XG4gICAgICAgICAgYWNjZXNzS2V5LFxuICAgICAgICAgIHNlY3JldEtleVxuICAgICAgICB9LFxuICAgICAgICBob3N0LFxuICAgICAgICBwb3J0LFxuICAgICAgICBhcHBsaWNhdGlvbklkLFxuICAgICAgICBmaWxlc1NyYyxcbiAgICAgICAgZmlsZXNEZXN0LFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGFwcGxpY2F0aW9uVHlwZXMsXG4gICAgICAgIGxhbmd1YWdlU3BlY2lmaWNhdGlvbnMsXG4gICAgICAgIGFyZVN1YnNjcmliZXJzT3JkZXJlZCxcbiAgICAgICAgY3dkLFxuICAgICAgICBzb3VyY2VNYXBzXG4gICAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbn0pKCk7XG4iXX0=
