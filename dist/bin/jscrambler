#!/usr/bin/env node
'use strict';

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _lodash = require('lodash.defaults');

var _lodash2 = _interopRequireDefault(_lodash);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config3 = require('../lib/config');

var _config4 = _interopRequireDefault(_config3);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _cli = require('../lib/cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

_commander2.default.version(require('../../package.json').version).usage('[options] <file ...>').option('-a, --access-key <accessKey>', 'Access key').option('-c, --config <config>', 'JScrambler configuration options').option('-h, --host <host>', 'Hostname').option('-i, --application-id <id>', 'Application ID').option('-o, --output-dir <dir>', 'Output directory').option('-p, --port <port>', 'Port').option('-s, --secret-key <secretKey>', 'Secret key').parse(process.argv);

var globSrc, filesSrc, config;

// If -c, --config file was provided
if (_commander2.default.config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(_path2.default.resolve(_commander2.default.config, '.'));
} else {
  config = {};
}

config.accessKey = _commander2.default.accessKey || (config.keys ? config.keys.accessKey : void 0);
config.secretKey = _commander2.default.secretKey || (config.keys ? config.keys.secretKey : void 0);
config.host = _commander2.default.host || config.host;
config.port = _commander2.default.port || config.port;
config.filesDest = _commander2.default.outputDir || config.filesDest;
config.applicationId = _commander2.default.applicationId || config.applicationId;

config = (0, _lodash2.default)(config, _config4.default);

globSrc = config.filesSrc;
// If src paths have been provided
if (_commander2.default.args.length > 0) {
  globSrc = _commander2.default.args;
}

if (globSrc && globSrc.length) {
  filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (var i = 0, l = globSrc.length; i < l; ++i) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)
    filesSrc = filesSrc.concat(_glob2.default.sync(globSrc[i], {
      dot: true
    }));
  }
}

var _config2 = config;
var applicationId = _config2.applicationId;
var accessKey = _config2.accessKey;
var secretKey = _config2.secretKey;
var filesDest = _config2.filesDest;
var host = _config2.host;
var port = _config2.port;
var applicationTypes = _config2.applicationTypes;
var languageSpecifications = _config2.languageSpecifications;
var areSubscribersOrdered = _config2.areSubscribersOrdered;


var params = (0, _cli.mergeAndParseParams)(_commander2.default, config.params);

// Go, go, go
_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return _lib2.default.protectAndDownload({
            keys: {
              accessKey: accessKey,
              secretKey: secretKey
            },
            host: host,
            port: port,
            applicationId: applicationId,
            filesSrc: filesSrc,
            filesDest: filesDest,
            params: params,
            applicationTypes: applicationTypes,
            languageSpecifications: languageSpecifications,
            areSubscribersOrdered: areSubscribersOrdered
          });

        case 3:
          _context.next = 9;
          break;

        case 5:
          _context.prev = 5;
          _context.t0 = _context['catch'](0);

          console.error(_context.t0);
          process.exit(1);

        case 9:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[0, 5]]);
}))();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vanNjcmFtYmxlciJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBOztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxvQkFDRyxPQURILENBQ1csUUFBUSxvQkFBUixFQUE4QixPQUR6QyxFQUVHLEtBRkgsQ0FFUyxzQkFGVCxFQUdHLE1BSEgsQ0FHVSw4QkFIVixFQUcwQyxZQUgxQyxFQUlHLE1BSkgsQ0FJVSx1QkFKVixFQUltQyxrQ0FKbkMsRUFLRyxNQUxILENBS1UsbUJBTFYsRUFLK0IsVUFML0IsRUFNRyxNQU5ILENBTVUsMkJBTlYsRUFNdUMsZ0JBTnZDLEVBT0csTUFQSCxDQU9VLHdCQVBWLEVBT29DLGtCQVBwQyxFQVFHLE1BUkgsQ0FRVSxtQkFSVixFQVErQixNQVIvQixFQVNHLE1BVEgsQ0FTVSw4QkFUVixFQVMwQyxZQVQxQyxFQVVHLEtBVkgsQ0FVUyxRQUFRLElBVmpCOztBQVlBLElBQUksT0FBSixFQUFhLFFBQWIsRUFBdUIsTUFBdkI7O0FBRUE7QUFDQSxJQUFJLG9CQUFVLE1BQWQsRUFBc0I7QUFDcEI7QUFDQTtBQUNBLFdBQVMsUUFBUSxlQUFLLE9BQUwsQ0FBYSxvQkFBVSxNQUF2QixFQUErQixHQUEvQixDQUFSLENBQVQ7QUFDRCxDQUpELE1BSU87QUFDTCxXQUFTLEVBQVQ7QUFDRDs7QUFFRCxPQUFPLFNBQVAsR0FBbUIsb0JBQVUsU0FBVixLQUF3QixPQUFPLElBQVAsR0FBYyxPQUFPLElBQVAsQ0FBWSxTQUExQixHQUFzQyxLQUFLLENBQW5FLENBQW5CO0FBQ0EsT0FBTyxTQUFQLEdBQW1CLG9CQUFVLFNBQVYsS0FBd0IsT0FBTyxJQUFQLEdBQWMsT0FBTyxJQUFQLENBQVksU0FBMUIsR0FBc0MsS0FBSyxDQUFuRSxDQUFuQjtBQUNBLE9BQU8sSUFBUCxHQUFjLG9CQUFVLElBQVYsSUFBa0IsT0FBTyxJQUF2QztBQUNBLE9BQU8sSUFBUCxHQUFjLG9CQUFVLElBQVYsSUFBa0IsT0FBTyxJQUF2QztBQUNBLE9BQU8sU0FBUCxHQUFtQixvQkFBVSxTQUFWLElBQXVCLE9BQU8sU0FBakQ7QUFDQSxPQUFPLGFBQVAsR0FBdUIsb0JBQVUsYUFBVixJQUEyQixPQUFPLGFBQXpEOztBQUVBLFNBQVMsc0JBQVMsTUFBVCxtQkFBVDs7QUFFQSxVQUFVLE9BQU8sUUFBakI7QUFDQTtBQUNBLElBQUksb0JBQVUsSUFBVixDQUFlLE1BQWYsR0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0IsWUFBVSxvQkFBVSxJQUFwQjtBQUNEOztBQUVELElBQUksV0FBVyxRQUFRLE1BQXZCLEVBQStCO0FBQzdCLGFBQVcsRUFBWDtBQUNBO0FBQ0EsT0FBSyxJQUFJLElBQUksQ0FBUixFQUFXLElBQUksUUFBUSxNQUE1QixFQUFvQyxJQUFJLENBQXhDLEVBQTJDLEVBQUUsQ0FBN0MsRUFBZ0Q7QUFDOUM7QUFDQTtBQUNBLGVBQVcsU0FBUyxNQUFULENBQWdCLGVBQUssSUFBTCxDQUFVLFFBQVEsQ0FBUixDQUFWLEVBQXNCO0FBQy9DLFdBQUs7QUFEMEMsS0FBdEIsQ0FBaEIsQ0FBWDtBQUdEO0FBQ0Y7O2VBWUcsTTtJQVRGLGEsWUFBQSxhO0lBQ0EsUyxZQUFBLFM7SUFDQSxTLFlBQUEsUztJQUNBLFMsWUFBQSxTO0lBQ0EsSSxZQUFBLEk7SUFDQSxJLFlBQUEsSTtJQUNBLGdCLFlBQUEsZ0I7SUFDQSxzQixZQUFBLHNCO0lBQ0EscUIsWUFBQSxxQjs7O0FBR0YsSUFBTSxTQUFTLG1EQUErQixPQUFPLE1BQXRDLENBQWY7O0FBRUE7QUFDQSwwQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQUVTLGNBQ0gsa0JBREcsQ0FDZ0I7QUFDbEIsa0JBQU07QUFDSixrQ0FESTtBQUVKO0FBRkksYUFEWTtBQUtsQixzQkFMa0I7QUFNbEIsc0JBTmtCO0FBT2xCLHdDQVBrQjtBQVFsQiw4QkFSa0I7QUFTbEIsZ0NBVGtCO0FBVWxCLDBCQVZrQjtBQVdsQiw4Q0FYa0I7QUFZbEIsMERBWmtCO0FBYWxCO0FBYmtCLFdBRGhCLENBRlQ7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFtQkcsa0JBQVEsS0FBUjtBQUNBLGtCQUFRLElBQVIsQ0FBYSxDQUFiOztBQXBCSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUFEIiwiZmlsZSI6ImpzY3JhbWJsZXIiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XG5cbmltcG9ydCBjb21tYW5kZXIgZnJvbSAnY29tbWFuZGVyJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICdsb2Rhc2guZGVmYXVsdHMnO1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IF9jb25maWcgZnJvbSAnLi4vbGliL2NvbmZpZyc7XG5pbXBvcnQgalNjcmFtYmxlciBmcm9tICcuLi9saWInO1xuaW1wb3J0IHttZXJnZUFuZFBhcnNlUGFyYW1zfSBmcm9tICcuLi9saWIvY2xpJztcblxuY29tbWFuZGVyXG4gIC52ZXJzaW9uKHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24pXG4gIC51c2FnZSgnW29wdGlvbnNdIDxmaWxlIC4uLj4nKVxuICAub3B0aW9uKCctYSwgLS1hY2Nlc3Mta2V5IDxhY2Nlc3NLZXk+JywgJ0FjY2VzcyBrZXknKVxuICAub3B0aW9uKCctYywgLS1jb25maWcgPGNvbmZpZz4nLCAnSlNjcmFtYmxlciBjb25maWd1cmF0aW9uIG9wdGlvbnMnKVxuICAub3B0aW9uKCctaCwgLS1ob3N0IDxob3N0PicsICdIb3N0bmFtZScpXG4gIC5vcHRpb24oJy1pLCAtLWFwcGxpY2F0aW9uLWlkIDxpZD4nLCAnQXBwbGljYXRpb24gSUQnKVxuICAub3B0aW9uKCctbywgLS1vdXRwdXQtZGlyIDxkaXI+JywgJ091dHB1dCBkaXJlY3RvcnknKVxuICAub3B0aW9uKCctcCwgLS1wb3J0IDxwb3J0PicsICdQb3J0JylcbiAgLm9wdGlvbignLXMsIC0tc2VjcmV0LWtleSA8c2VjcmV0S2V5PicsICdTZWNyZXQga2V5JylcbiAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbnZhciBnbG9iU3JjLCBmaWxlc1NyYywgY29uZmlnO1xuXG4vLyBJZiAtYywgLS1jb25maWcgZmlsZSB3YXMgcHJvdmlkZWRcbmlmIChjb21tYW5kZXIuY29uZmlnKSB7XG4gIC8vIFdlJ3JlIHVzaW5nIGBjb21tYW5kZXJgIChDTEkpIGFzIHRoZSBzb3VyY2Ugb2YgYWxsIHRydXRocywgZmFsbGluZyBiYWNrIHRvXG4gIC8vIHRoZSBgY29uZmlnYCBwcm92aWRlZCBieSB0aGUgZmlsZSBwYXNzZWQgYXMgYXJndW1lbnRcbiAgY29uZmlnID0gcmVxdWlyZShwYXRoLnJlc29sdmUoY29tbWFuZGVyLmNvbmZpZywgJy4nKSk7XG59IGVsc2Uge1xuICBjb25maWcgPSB7fTtcbn1cblxuY29uZmlnLmFjY2Vzc0tleSA9IGNvbW1hbmRlci5hY2Nlc3NLZXkgfHwgKGNvbmZpZy5rZXlzID8gY29uZmlnLmtleXMuYWNjZXNzS2V5IDogdm9pZCAwKTtcbmNvbmZpZy5zZWNyZXRLZXkgPSBjb21tYW5kZXIuc2VjcmV0S2V5IHx8IChjb25maWcua2V5cyA/IGNvbmZpZy5rZXlzLnNlY3JldEtleSA6IHZvaWQgMCk7XG5jb25maWcuaG9zdCA9IGNvbW1hbmRlci5ob3N0IHx8IGNvbmZpZy5ob3N0O1xuY29uZmlnLnBvcnQgPSBjb21tYW5kZXIucG9ydCB8fCBjb25maWcucG9ydDtcbmNvbmZpZy5maWxlc0Rlc3QgPSBjb21tYW5kZXIub3V0cHV0RGlyIHx8IGNvbmZpZy5maWxlc0Rlc3Q7XG5jb25maWcuYXBwbGljYXRpb25JZCA9IGNvbW1hbmRlci5hcHBsaWNhdGlvbklkIHx8IGNvbmZpZy5hcHBsaWNhdGlvbklkO1xuXG5jb25maWcgPSBkZWZhdWx0cyhjb25maWcsIF9jb25maWcpO1xuXG5nbG9iU3JjID0gY29uZmlnLmZpbGVzU3JjO1xuLy8gSWYgc3JjIHBhdGhzIGhhdmUgYmVlbiBwcm92aWRlZFxuaWYgKGNvbW1hbmRlci5hcmdzLmxlbmd0aCA+IDApIHtcbiAgZ2xvYlNyYyA9IGNvbW1hbmRlci5hcmdzO1xufVxuXG5pZiAoZ2xvYlNyYyAmJiBnbG9iU3JjLmxlbmd0aCkge1xuICBmaWxlc1NyYyA9IFtdO1xuICAvLyBJdGVyYXRlIGBnbG9iU3JjYCB0byBidWlsZCBhIGxpc3Qgb2Ygc291cmNlIGZpbGVzIGludG8gYGZpbGVzU3JjYFxuICBmb3IgKGxldCBpID0gMCwgbCA9IGdsb2JTcmMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgLy8gQ2FsbGluZyBzeW5jIGBnbG9iYCBiZWNhdXNlIGFzeW5jIGlzIHBvaW50bGVzcyBmb3IgdGhlIENMSSB1c2UgY2FzZVxuICAgIC8vIChhcyBvZiBub3cgYXQgbGVhc3QpXG4gICAgZmlsZXNTcmMgPSBmaWxlc1NyYy5jb25jYXQoZ2xvYi5zeW5jKGdsb2JTcmNbaV0sIHtcbiAgICAgIGRvdDogdHJ1ZVxuICAgIH0pKTtcbiAgfVxufVxuXG5jb25zdCB7XG4gIGFwcGxpY2F0aW9uSWQsXG4gIGFjY2Vzc0tleSxcbiAgc2VjcmV0S2V5LFxuICBmaWxlc0Rlc3QsXG4gIGhvc3QsXG4gIHBvcnQsXG4gIGFwcGxpY2F0aW9uVHlwZXMsXG4gIGxhbmd1YWdlU3BlY2lmaWNhdGlvbnMsXG4gIGFyZVN1YnNjcmliZXJzT3JkZXJlZFxufSA9IGNvbmZpZztcblxuY29uc3QgcGFyYW1zID0gbWVyZ2VBbmRQYXJzZVBhcmFtcyhjb21tYW5kZXIsIGNvbmZpZy5wYXJhbXMpO1xuXG4vLyBHbywgZ28sIGdvXG4oYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGF3YWl0IGpTY3JhbWJsZXJcbiAgICAgIC5wcm90ZWN0QW5kRG93bmxvYWQoe1xuICAgICAgICBrZXlzOiB7XG4gICAgICAgICAgYWNjZXNzS2V5LFxuICAgICAgICAgIHNlY3JldEtleVxuICAgICAgICB9LFxuICAgICAgICBob3N0LFxuICAgICAgICBwb3J0LFxuICAgICAgICBhcHBsaWNhdGlvbklkLFxuICAgICAgICBmaWxlc1NyYyxcbiAgICAgICAgZmlsZXNEZXN0LFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGFwcGxpY2F0aW9uVHlwZXMsXG4gICAgICAgIGxhbmd1YWdlU3BlY2lmaWNhdGlvbnMsXG4gICAgICAgIGFyZVN1YnNjcmliZXJzT3JkZXJlZFxuICAgICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG59KSgpO1xuIl19
