#!/usr/bin/env node
'use strict';

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _lodash = require('lodash.defaults');

var _lodash2 = _interopRequireDefault(_lodash);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config3 = require('../lib/config');

var _config4 = _interopRequireDefault(_config3);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _cli = require('../lib/cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var debug = !!process.env.DEBUG;

_commander2.default.version(require('../../package.json').version).usage('[options] <file ...>').option('-a, --access-key <accessKey>', 'Access key').option('-c, --config <config>', 'JScrambler configuration options').option('-H, --host <host>', 'Hostname').option('-i, --application-id <id>', 'Application ID').option('-o, --output-dir <dir>', 'Output directory').option('-p, --port <port>', 'Port').option('-C, --cwd <dir>', 'Current Working Directory').option('-s, --secret-key <secretKey>', 'Secret key').option('-m, --source-maps <id>', 'Download source maps').option('-O, --recommended-order', 'Use recommended order').option('-B, --bail', 'Cancel protection if any file contains errors').parse(process.argv);

var globSrc, filesSrc, config;

// If -c, --config file was provided
if (_commander2.default.config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(_path2.default.resolve(_commander2.default.config, '.'));
} else {
  config = {};
}

config.accessKey = _commander2.default.accessKey || (config.keys ? config.keys.accessKey : void 0);
config.secretKey = _commander2.default.secretKey || (config.keys ? config.keys.secretKey : void 0);
config.host = _commander2.default.host || config.host;
config.port = _commander2.default.port || config.port;
config.filesDest = _commander2.default.outputDir || config.filesDest;
config.applicationId = _commander2.default.applicationId || config.applicationId;
config.cwd = _commander2.default.cwd || config.cwd;
config.useRecommendedOrder = _commander2.default.recommendedOrder || config.useRecommendedOrder;
config.bail = _commander2.default.bail || config.bail;

config = (0, _lodash2.default)(config, _config4.default);

globSrc = config.filesSrc;
// If src paths have been provided
if (_commander2.default.args.length > 0) {
  globSrc = _commander2.default.args;
}

if (globSrc && globSrc.length) {
  filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (var i = 0, l = globSrc.length; i < l; ++i) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)
    var tmpGlob = _glob2.default.sync(globSrc[i], {
      dot: true
    });

    if (debug) {
      if (tmpGlob.length === 0) {
        console.log('Pattern "' + globSrc[i] + '" doesn\'t match any files. Will be ignored.');
      } else {
        console.log('Pattern "' + globSrc[i] + '" matched the following files:');
        tmpGlob.forEach(function (file) {
          console.log('    ' + file);
        });
      }
    }
    filesSrc = filesSrc.concat(tmpGlob);
  }
}

var _config2 = config,
    applicationId = _config2.applicationId,
    accessKey = _config2.accessKey,
    secretKey = _config2.secretKey,
    filesDest = _config2.filesDest,
    host = _config2.host,
    port = _config2.port,
    applicationTypes = _config2.applicationTypes,
    languageSpecifications = _config2.languageSpecifications,
    areSubscribersOrdered = _config2.areSubscribersOrdered,
    cwd = _config2.cwd,
    _config2$sourceMaps = _config2.sourceMaps,
    sourceMaps = _config2$sourceMaps === undefined ? false : _config2$sourceMaps,
    useRecommendedOrder = _config2.useRecommendedOrder,
    bail = _config2.bail;


var params = (0, _cli.mergeAndParseParams)(_commander2.default, config.params);

if (_commander2.default.sourceMaps) {
  // Go, go, go download
  _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _lib2.default.downloadSourceMaps({
              keys: {
                accessKey: accessKey,
                secretKey: secretKey
              },
              host: host,
              port: port,
              filesDest: filesDest,
              filesSrc: filesSrc,
              protectionId: _commander2.default.sourceMaps
            });

          case 3:
            _context.next = 9;
            break;

          case 5:
            _context.prev = 5;
            _context.t0 = _context['catch'](0);

            console.error(_context.t0);
            process.exit(1);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 5]]);
  }))();
} else {
  // Go, go, go
  _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return _lib2.default.protectAndDownload({
              keys: {
                accessKey: accessKey,
                secretKey: secretKey
              },
              host: host,
              port: port,
              applicationId: applicationId,
              filesSrc: filesSrc,
              filesDest: filesDest,
              params: params,
              applicationTypes: applicationTypes,
              languageSpecifications: languageSpecifications,
              areSubscribersOrdered: areSubscribersOrdered,
              cwd: cwd,
              sourceMaps: sourceMaps,
              useRecommendedOrder: useRecommendedOrder,
              bail: bail
            });

          case 3:
            _context2.next = 9;
            break;

          case 5:
            _context2.prev = 5;
            _context2.t0 = _context2['catch'](0);

            console.error(_context2.t0.message);
            process.exit(1);

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 5]]);
  }))();
}
//# sourceMappingURL=data:application/json;base64,
