#!/usr/bin/env node
'use strict';

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _lodash = require('lodash.defaults');

var _lodash2 = _interopRequireDefault(_lodash);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config3 = require('../lib/config');

var _config4 = _interopRequireDefault(_config3);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _cli = require('../lib/cli');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

_commander2.default.version(require('../../package.json').version).usage('[options] <file ...>').option('-a, --access-key <accessKey>', 'Access key').option('-c, --config <config>', 'JScrambler configuration options').option('-H, --host <host>', 'Hostname').option('-i, --application-id <id>', 'Application ID').option('-o, --output-dir <dir>', 'Output directory').option('-p, --port <port>', 'Port').option('-C, --cwd <dir>', 'Current Working Directory').option('-s, --secret-key <secretKey>', 'Secret key').parse(process.argv);

var globSrc, filesSrc, config;

// If -c, --config file was provided
if (_commander2.default.config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(_path2.default.resolve(_commander2.default.config, '.'));
} else {
  config = {};
}

config.accessKey = _commander2.default.accessKey || (config.keys ? config.keys.accessKey : void 0);
config.secretKey = _commander2.default.secretKey || (config.keys ? config.keys.secretKey : void 0);
config.host = _commander2.default.host || config.host;
config.port = _commander2.default.port || config.port;
config.filesDest = _commander2.default.outputDir || config.filesDest;
config.applicationId = _commander2.default.applicationId || config.applicationId;
config.cwd = _commander2.default.cwd || config.cwd;

config = (0, _lodash2.default)(config, _config4.default);

globSrc = config.filesSrc;
// If src paths have been provided
if (_commander2.default.args.length > 0) {
  globSrc = _commander2.default.args;
}

if (globSrc && globSrc.length) {
  filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (var i = 0, l = globSrc.length; i < l; ++i) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)
    filesSrc = filesSrc.concat(_glob2.default.sync(globSrc[i], {
      dot: true
    }));
  }
}

var _config2 = config;
var applicationId = _config2.applicationId;
var accessKey = _config2.accessKey;
var secretKey = _config2.secretKey;
var filesDest = _config2.filesDest;
var host = _config2.host;
var port = _config2.port;
var applicationTypes = _config2.applicationTypes;
var languageSpecifications = _config2.languageSpecifications;
var areSubscribersOrdered = _config2.areSubscribersOrdered;
var cwd = _config2.cwd;


var params = (0, _cli.mergeAndParseParams)(_commander2.default, config.params);

// Go, go, go
_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return _lib2.default.protectAndDownload({
            keys: {
              accessKey: accessKey,
              secretKey: secretKey
            },
            host: host,
            port: port,
            applicationId: applicationId,
            filesSrc: filesSrc,
            filesDest: filesDest,
            params: params,
            applicationTypes: applicationTypes,
            languageSpecifications: languageSpecifications,
            areSubscribersOrdered: areSubscribersOrdered,
            cwd: cwd
          });

        case 3:
          _context.next = 9;
          break;

        case 5:
          _context.prev = 5;
          _context.t0 = _context['catch'](0);

          console.error(_context.t0);
          process.exit(1);

        case 9:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[0, 5]]);
}))();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vanNjcmFtYmxlciJdLCJuYW1lcyI6WyJ2ZXJzaW9uIiwicmVxdWlyZSIsInVzYWdlIiwib3B0aW9uIiwicGFyc2UiLCJwcm9jZXNzIiwiYXJndiIsImdsb2JTcmMiLCJmaWxlc1NyYyIsImNvbmZpZyIsInJlc29sdmUiLCJhY2Nlc3NLZXkiLCJrZXlzIiwic2VjcmV0S2V5IiwiaG9zdCIsInBvcnQiLCJmaWxlc0Rlc3QiLCJvdXRwdXREaXIiLCJhcHBsaWNhdGlvbklkIiwiY3dkIiwiYXJncyIsImxlbmd0aCIsImkiLCJsIiwiY29uY2F0Iiwic3luYyIsImRvdCIsImFwcGxpY2F0aW9uVHlwZXMiLCJsYW5ndWFnZVNwZWNpZmljYXRpb25zIiwiYXJlU3Vic2NyaWJlcnNPcmRlcmVkIiwicGFyYW1zIiwicHJvdGVjdEFuZERvd25sb2FkIiwiY29uc29sZSIsImVycm9yIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsb0JBQ0dBLE9BREgsQ0FDV0MsUUFBUSxvQkFBUixFQUE4QkQsT0FEekMsRUFFR0UsS0FGSCxDQUVTLHNCQUZULEVBR0dDLE1BSEgsQ0FHVSw4QkFIVixFQUcwQyxZQUgxQyxFQUlHQSxNQUpILENBSVUsdUJBSlYsRUFJbUMsa0NBSm5DLEVBS0dBLE1BTEgsQ0FLVSxtQkFMVixFQUsrQixVQUwvQixFQU1HQSxNQU5ILENBTVUsMkJBTlYsRUFNdUMsZ0JBTnZDLEVBT0dBLE1BUEgsQ0FPVSx3QkFQVixFQU9vQyxrQkFQcEMsRUFRR0EsTUFSSCxDQVFVLG1CQVJWLEVBUStCLE1BUi9CLEVBU0dBLE1BVEgsQ0FTVSxpQkFUVixFQVM2QiwyQkFUN0IsRUFVR0EsTUFWSCxDQVVVLDhCQVZWLEVBVTBDLFlBVjFDLEVBV0dDLEtBWEgsQ0FXU0MsUUFBUUMsSUFYakI7O0FBYUEsSUFBSUMsT0FBSixFQUFhQyxRQUFiLEVBQXVCQyxNQUF2Qjs7QUFFQTtBQUNBLElBQUksb0JBQVVBLE1BQWQsRUFBc0I7QUFDcEI7QUFDQTtBQUNBQSxXQUFTUixRQUFRLGVBQUtTLE9BQUwsQ0FBYSxvQkFBVUQsTUFBdkIsRUFBK0IsR0FBL0IsQ0FBUixDQUFUO0FBQ0QsQ0FKRCxNQUlPO0FBQ0xBLFdBQVMsRUFBVDtBQUNEOztBQUVEQSxPQUFPRSxTQUFQLEdBQW1CLG9CQUFVQSxTQUFWLEtBQXdCRixPQUFPRyxJQUFQLEdBQWNILE9BQU9HLElBQVAsQ0FBWUQsU0FBMUIsR0FBc0MsS0FBSyxDQUFuRSxDQUFuQjtBQUNBRixPQUFPSSxTQUFQLEdBQW1CLG9CQUFVQSxTQUFWLEtBQXdCSixPQUFPRyxJQUFQLEdBQWNILE9BQU9HLElBQVAsQ0FBWUMsU0FBMUIsR0FBc0MsS0FBSyxDQUFuRSxDQUFuQjtBQUNBSixPQUFPSyxJQUFQLEdBQWMsb0JBQVVBLElBQVYsSUFBa0JMLE9BQU9LLElBQXZDO0FBQ0FMLE9BQU9NLElBQVAsR0FBYyxvQkFBVUEsSUFBVixJQUFrQk4sT0FBT00sSUFBdkM7QUFDQU4sT0FBT08sU0FBUCxHQUFtQixvQkFBVUMsU0FBVixJQUF1QlIsT0FBT08sU0FBakQ7QUFDQVAsT0FBT1MsYUFBUCxHQUF1QixvQkFBVUEsYUFBVixJQUEyQlQsT0FBT1MsYUFBekQ7QUFDQVQsT0FBT1UsR0FBUCxHQUFhLG9CQUFVQSxHQUFWLElBQWlCVixPQUFPVSxHQUFyQzs7QUFFQVYsU0FBUyxzQkFBU0EsTUFBVCxtQkFBVDs7QUFFQUYsVUFBVUUsT0FBT0QsUUFBakI7QUFDQTtBQUNBLElBQUksb0JBQVVZLElBQVYsQ0FBZUMsTUFBZixHQUF3QixDQUE1QixFQUErQjtBQUM3QmQsWUFBVSxvQkFBVWEsSUFBcEI7QUFDRDs7QUFFRCxJQUFJYixXQUFXQSxRQUFRYyxNQUF2QixFQUErQjtBQUM3QmIsYUFBVyxFQUFYO0FBQ0E7QUFDQSxPQUFLLElBQUljLElBQUksQ0FBUixFQUFXQyxJQUFJaEIsUUFBUWMsTUFBNUIsRUFBb0NDLElBQUlDLENBQXhDLEVBQTJDLEVBQUVELENBQTdDLEVBQWdEO0FBQzlDO0FBQ0E7QUFDQWQsZUFBV0EsU0FBU2dCLE1BQVQsQ0FBZ0IsZUFBS0MsSUFBTCxDQUFVbEIsUUFBUWUsQ0FBUixDQUFWLEVBQXNCO0FBQy9DSSxXQUFLO0FBRDBDLEtBQXRCLENBQWhCLENBQVg7QUFHRDtBQUNGOztlQWFHakIsTTtJQVZGUyxhLFlBQUFBLGE7SUFDQVAsUyxZQUFBQSxTO0lBQ0FFLFMsWUFBQUEsUztJQUNBRyxTLFlBQUFBLFM7SUFDQUYsSSxZQUFBQSxJO0lBQ0FDLEksWUFBQUEsSTtJQUNBWSxnQixZQUFBQSxnQjtJQUNBQyxzQixZQUFBQSxzQjtJQUNBQyxxQixZQUFBQSxxQjtJQUNBVixHLFlBQUFBLEc7OztBQUdGLElBQU1XLFNBQVMsbURBQStCckIsT0FBT3FCLE1BQXRDLENBQWY7O0FBRUE7QUFDQSwwQ0FBQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQUVTLGNBQ0hDLGtCQURHLENBQ2dCO0FBQ2xCbkIsa0JBQU07QUFDSkQsa0NBREk7QUFFSkU7QUFGSSxhQURZO0FBS2xCQyxzQkFMa0I7QUFNbEJDLHNCQU5rQjtBQU9sQkcsd0NBUGtCO0FBUWxCViw4QkFSa0I7QUFTbEJRLGdDQVRrQjtBQVVsQmMsMEJBVmtCO0FBV2xCSCw4Q0FYa0I7QUFZbEJDLDBEQVprQjtBQWFsQkMsd0RBYmtCO0FBY2xCVjtBQWRrQixXQURoQixDQUZUOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBb0JHYSxrQkFBUUMsS0FBUjtBQUNBNUIsa0JBQVE2QixJQUFSLENBQWEsQ0FBYjs7QUFyQkg7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBRCIsImZpbGUiOiJqc2NyYW1ibGVyIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xuXG5pbXBvcnQgY29tbWFuZGVyIGZyb20gJ2NvbW1hbmRlcic7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnbG9kYXNoLmRlZmF1bHRzJztcbmltcG9ydCBnbG9iIGZyb20gJ2dsb2InO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCBfY29uZmlnIGZyb20gJy4uL2xpYi9jb25maWcnO1xuaW1wb3J0IGpTY3JhbWJsZXIgZnJvbSAnLi4vbGliJztcbmltcG9ydCB7bWVyZ2VBbmRQYXJzZVBhcmFtc30gZnJvbSAnLi4vbGliL2NsaSc7XG5cbmNvbW1hbmRlclxuICAudmVyc2lvbihyZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAudXNhZ2UoJ1tvcHRpb25zXSA8ZmlsZSAuLi4+JylcbiAgLm9wdGlvbignLWEsIC0tYWNjZXNzLWtleSA8YWNjZXNzS2V5PicsICdBY2Nlc3Mga2V5JylcbiAgLm9wdGlvbignLWMsIC0tY29uZmlnIDxjb25maWc+JywgJ0pTY3JhbWJsZXIgY29uZmlndXJhdGlvbiBvcHRpb25zJylcbiAgLm9wdGlvbignLUgsIC0taG9zdCA8aG9zdD4nLCAnSG9zdG5hbWUnKVxuICAub3B0aW9uKCctaSwgLS1hcHBsaWNhdGlvbi1pZCA8aWQ+JywgJ0FwcGxpY2F0aW9uIElEJylcbiAgLm9wdGlvbignLW8sIC0tb3V0cHV0LWRpciA8ZGlyPicsICdPdXRwdXQgZGlyZWN0b3J5JylcbiAgLm9wdGlvbignLXAsIC0tcG9ydCA8cG9ydD4nLCAnUG9ydCcpXG4gIC5vcHRpb24oJy1DLCAtLWN3ZCA8ZGlyPicsICdDdXJyZW50IFdvcmtpbmcgRGlyZWN0b3J5JylcbiAgLm9wdGlvbignLXMsIC0tc2VjcmV0LWtleSA8c2VjcmV0S2V5PicsICdTZWNyZXQga2V5JylcbiAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbnZhciBnbG9iU3JjLCBmaWxlc1NyYywgY29uZmlnO1xuXG4vLyBJZiAtYywgLS1jb25maWcgZmlsZSB3YXMgcHJvdmlkZWRcbmlmIChjb21tYW5kZXIuY29uZmlnKSB7XG4gIC8vIFdlJ3JlIHVzaW5nIGBjb21tYW5kZXJgIChDTEkpIGFzIHRoZSBzb3VyY2Ugb2YgYWxsIHRydXRocywgZmFsbGluZyBiYWNrIHRvXG4gIC8vIHRoZSBgY29uZmlnYCBwcm92aWRlZCBieSB0aGUgZmlsZSBwYXNzZWQgYXMgYXJndW1lbnRcbiAgY29uZmlnID0gcmVxdWlyZShwYXRoLnJlc29sdmUoY29tbWFuZGVyLmNvbmZpZywgJy4nKSk7XG59IGVsc2Uge1xuICBjb25maWcgPSB7fTtcbn1cblxuY29uZmlnLmFjY2Vzc0tleSA9IGNvbW1hbmRlci5hY2Nlc3NLZXkgfHwgKGNvbmZpZy5rZXlzID8gY29uZmlnLmtleXMuYWNjZXNzS2V5IDogdm9pZCAwKTtcbmNvbmZpZy5zZWNyZXRLZXkgPSBjb21tYW5kZXIuc2VjcmV0S2V5IHx8IChjb25maWcua2V5cyA/IGNvbmZpZy5rZXlzLnNlY3JldEtleSA6IHZvaWQgMCk7XG5jb25maWcuaG9zdCA9IGNvbW1hbmRlci5ob3N0IHx8IGNvbmZpZy5ob3N0O1xuY29uZmlnLnBvcnQgPSBjb21tYW5kZXIucG9ydCB8fCBjb25maWcucG9ydDtcbmNvbmZpZy5maWxlc0Rlc3QgPSBjb21tYW5kZXIub3V0cHV0RGlyIHx8IGNvbmZpZy5maWxlc0Rlc3Q7XG5jb25maWcuYXBwbGljYXRpb25JZCA9IGNvbW1hbmRlci5hcHBsaWNhdGlvbklkIHx8IGNvbmZpZy5hcHBsaWNhdGlvbklkO1xuY29uZmlnLmN3ZCA9IGNvbW1hbmRlci5jd2QgfHwgY29uZmlnLmN3ZDtcblxuY29uZmlnID0gZGVmYXVsdHMoY29uZmlnLCBfY29uZmlnKTtcblxuZ2xvYlNyYyA9IGNvbmZpZy5maWxlc1NyYztcbi8vIElmIHNyYyBwYXRocyBoYXZlIGJlZW4gcHJvdmlkZWRcbmlmIChjb21tYW5kZXIuYXJncy5sZW5ndGggPiAwKSB7XG4gIGdsb2JTcmMgPSBjb21tYW5kZXIuYXJncztcbn1cblxuaWYgKGdsb2JTcmMgJiYgZ2xvYlNyYy5sZW5ndGgpIHtcbiAgZmlsZXNTcmMgPSBbXTtcbiAgLy8gSXRlcmF0ZSBgZ2xvYlNyY2AgdG8gYnVpbGQgYSBsaXN0IG9mIHNvdXJjZSBmaWxlcyBpbnRvIGBmaWxlc1NyY2BcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBnbG9iU3JjLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIC8vIENhbGxpbmcgc3luYyBgZ2xvYmAgYmVjYXVzZSBhc3luYyBpcyBwb2ludGxlc3MgZm9yIHRoZSBDTEkgdXNlIGNhc2VcbiAgICAvLyAoYXMgb2Ygbm93IGF0IGxlYXN0KVxuICAgIGZpbGVzU3JjID0gZmlsZXNTcmMuY29uY2F0KGdsb2Iuc3luYyhnbG9iU3JjW2ldLCB7XG4gICAgICBkb3Q6IHRydWVcbiAgICB9KSk7XG4gIH1cbn1cblxuY29uc3Qge1xuICBhcHBsaWNhdGlvbklkLFxuICBhY2Nlc3NLZXksXG4gIHNlY3JldEtleSxcbiAgZmlsZXNEZXN0LFxuICBob3N0LFxuICBwb3J0LFxuICBhcHBsaWNhdGlvblR5cGVzLFxuICBsYW5ndWFnZVNwZWNpZmljYXRpb25zLFxuICBhcmVTdWJzY3JpYmVyc09yZGVyZWQsXG4gIGN3ZFxufSA9IGNvbmZpZztcblxuY29uc3QgcGFyYW1zID0gbWVyZ2VBbmRQYXJzZVBhcmFtcyhjb21tYW5kZXIsIGNvbmZpZy5wYXJhbXMpO1xuXG4vLyBHbywgZ28sIGdvXG4oYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGF3YWl0IGpTY3JhbWJsZXJcbiAgICAgIC5wcm90ZWN0QW5kRG93bmxvYWQoe1xuICAgICAgICBrZXlzOiB7XG4gICAgICAgICAgYWNjZXNzS2V5LFxuICAgICAgICAgIHNlY3JldEtleVxuICAgICAgICB9LFxuICAgICAgICBob3N0LFxuICAgICAgICBwb3J0LFxuICAgICAgICBhcHBsaWNhdGlvbklkLFxuICAgICAgICBmaWxlc1NyYyxcbiAgICAgICAgZmlsZXNEZXN0LFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIGFwcGxpY2F0aW9uVHlwZXMsXG4gICAgICAgIGxhbmd1YWdlU3BlY2lmaWNhdGlvbnMsXG4gICAgICAgIGFyZVN1YnNjcmliZXJzT3JkZXJlZCxcbiAgICAgICAgY3dkXG4gICAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cbn0pKCk7XG4iXX0=
