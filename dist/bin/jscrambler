#!/usr/bin/env node
'use strict';

var _this = this;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _lodashDefaults = require('lodash.defaults');

var _lodashDefaults2 = _interopRequireDefault(_lodashDefaults);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libConfig = require('../lib/config');

var _libConfig2 = _interopRequireDefault(_libConfig);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _libCli = require('../lib/cli');

_commander2['default'].version(require('../../package.json').version).usage('[options] <file ...>').option('-a, --access-key <accessKey>', 'Access key').option('-c, --config <config>', 'JScrambler configuration options').option('-h, --host <host>', 'Hostname').option('-i, --applicationId <id>', 'Application ID').option('-o, --output-dir <dir>', 'Output directory').option('-p, --port <port>', 'Port').option('-s, --secret-key <secretKey>', 'Secret key').parse(process.argv);

var globSrc, filesSrc, config;

// If -c, --config file was provided
if (_commander2['default'].config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(_path2['default'].resolve(_commander2['default'].config, '.'));
} else {
  config = {};
}

config.accessKey = _commander2['default'].accessKey || (config.keys ? config.keys.accessKey : void 0);
config.secretKey = _commander2['default'].secretKey || (config.keys ? config.keys.secretKey : void 0);
config.host = _commander2['default'].host || config.host;
config.port = _commander2['default'].port || config.port;
config.filesDest = _commander2['default'].outputDir || config.filesDest;
config.applicationId = _commander2['default'].applicationId || config.applicationId;

config = (0, _lodashDefaults2['default'])(config, _libConfig2['default']);

globSrc = config.filesSrc;
// If src paths have been provided
if (_commander2['default'].args.length > 0) {
  globSrc = _commander2['default'].args;
}

if (globSrc && globSrc.length) {
  filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (var i = 0, l = globSrc.length; i < l; ++i) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)
    filesSrc = filesSrc.concat(_glob2['default'].sync(globSrc[i], {
      dot: true
    }));
  }
}

var _config2 = config;
var applicationId = _config2.applicationId;
var accessKey = _config2.accessKey;
var secretKey = _config2.secretKey;
var filesDest = _config2.filesDest;
var host = _config2.host;
var port = _config2.port;

var params = (0, _libCli.mergeAndParseParams)(_commander2['default'], config.params);

// Go, go, go
(function callee$0$0() {
  return regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return regeneratorRuntime.awrap(_lib2['default'].protectAndDownload({
          keys: {
            accessKey: accessKey,
            secretKey: secretKey
          },
          host: host,
          port: port,
          applicationId: applicationId,
          filesSrc: filesSrc,
          filesDest: filesDest,
          params: params
        }));

      case 3:
        context$1$0.next = 9;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        console.error(context$1$0.t0);
        process.exit(1);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this, [[0, 5]]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vanNjcmFtYmxlciJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7UUFFTyxnQkFBZ0I7O3lCQUVELFdBQVc7Ozs7OEJBQ1osaUJBQWlCOzs7O29CQUNyQixNQUFNOzs7O29CQUNOLE1BQU07Ozs7eUJBRUgsZUFBZTs7OzttQkFDWixRQUFROzs7O3NCQUNHLFlBQVk7O0FBRTlDLHVCQUNHLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDOUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQzdCLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxZQUFZLENBQUMsQ0FDcEQsTUFBTSxDQUFDLHVCQUF1QixFQUFFLGtDQUFrQyxDQUFDLENBQ25FLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FDdkMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLGdCQUFnQixDQUFDLENBQ3BELE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUNwRCxNQUFNLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQ25DLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxZQUFZLENBQUMsQ0FDcEQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFdkIsSUFBSSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQzs7O0FBRzlCLElBQUksdUJBQVUsTUFBTSxFQUFFOzs7QUFHcEIsUUFBTSxHQUFHLE9BQU8sQ0FBQyxrQkFBSyxPQUFPLENBQUMsdUJBQVUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDdkQsTUFBTTtBQUNMLFFBQU0sR0FBRyxFQUFFLENBQUM7Q0FDYjs7QUFFRCxNQUFNLENBQUMsU0FBUyxHQUFHLHVCQUFVLFNBQVMsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUN6RixNQUFNLENBQUMsU0FBUyxHQUFHLHVCQUFVLFNBQVMsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUN6RixNQUFNLENBQUMsSUFBSSxHQUFHLHVCQUFVLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsdUJBQVUsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDNUMsTUFBTSxDQUFDLFNBQVMsR0FBRyx1QkFBVSxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUMzRCxNQUFNLENBQUMsYUFBYSxHQUFHLHVCQUFVLGFBQWEsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDOztBQUV2RSxNQUFNLEdBQUcsaUNBQVMsTUFBTSx5QkFBVSxDQUFDOztBQUVuQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7QUFFMUIsSUFBSSx1QkFBVSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUM3QixTQUFPLEdBQUcsdUJBQVUsSUFBSSxDQUFDO0NBQzFCOztBQUVELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7QUFDN0IsVUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFZCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFOzs7QUFHOUMsWUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsa0JBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUMvQyxTQUFHLEVBQUUsSUFBSTtLQUNWLENBQUMsQ0FBQyxDQUFDO0dBQ0w7Q0FDRjs7ZUFTRyxNQUFNO0lBTlIsYUFBYSxZQUFiLGFBQWE7SUFDYixTQUFTLFlBQVQsU0FBUztJQUNULFNBQVMsWUFBVCxTQUFTO0lBQ1QsU0FBUyxZQUFULFNBQVM7SUFDVCxJQUFJLFlBQUosSUFBSTtJQUNKLElBQUksWUFBSixJQUFJOztBQUdOLElBQU0sTUFBTSxHQUFHLHlEQUErQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7OztBQUc3RCxDQUFDOzs7Ozs7d0NBRVMsaUJBQ0gsa0JBQWtCLENBQUM7QUFDbEIsY0FBSSxFQUFFO0FBQ0oscUJBQVMsRUFBVCxTQUFTO0FBQ1QscUJBQVMsRUFBVCxTQUFTO1dBQ1Y7QUFDRCxjQUFJLEVBQUosSUFBSTtBQUNKLGNBQUksRUFBSixJQUFJO0FBQ0osdUJBQWEsRUFBYixhQUFhO0FBQ2Isa0JBQVEsRUFBUixRQUFRO0FBQ1IsbUJBQVMsRUFBVCxTQUFTO0FBQ1QsZ0JBQU0sRUFBTixNQUFNO1NBQ1AsQ0FBQzs7Ozs7Ozs7OztBQUVKLGVBQU8sQ0FBQyxLQUFLLGdCQUFPLENBQUM7QUFDckIsZUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztFQUVuQixFQUFHLENBQUMiLCJmaWxlIjoianNjcmFtYmxlciIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcblxuaW1wb3J0IGNvbW1hbmRlciBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJ2xvZGFzaC5kZWZhdWx0cyc7XG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgX2NvbmZpZyBmcm9tICcuLi9saWIvY29uZmlnJztcbmltcG9ydCBqU2NyYW1ibGVyIGZyb20gJy4uL2xpYic7XG5pbXBvcnQge21lcmdlQW5kUGFyc2VQYXJhbXN9IGZyb20gJy4uL2xpYi9jbGknO1xuXG5jb21tYW5kZXJcbiAgLnZlcnNpb24ocmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbilcbiAgLnVzYWdlKCdbb3B0aW9uc10gPGZpbGUgLi4uPicpXG4gIC5vcHRpb24oJy1hLCAtLWFjY2Vzcy1rZXkgPGFjY2Vzc0tleT4nLCAnQWNjZXNzIGtleScpXG4gIC5vcHRpb24oJy1jLCAtLWNvbmZpZyA8Y29uZmlnPicsICdKU2NyYW1ibGVyIGNvbmZpZ3VyYXRpb24gb3B0aW9ucycpXG4gIC5vcHRpb24oJy1oLCAtLWhvc3QgPGhvc3Q+JywgJ0hvc3RuYW1lJylcbiAgLm9wdGlvbignLWksIC0tYXBwbGljYXRpb25JZCA8aWQ+JywgJ0FwcGxpY2F0aW9uIElEJylcbiAgLm9wdGlvbignLW8sIC0tb3V0cHV0LWRpciA8ZGlyPicsICdPdXRwdXQgZGlyZWN0b3J5JylcbiAgLm9wdGlvbignLXAsIC0tcG9ydCA8cG9ydD4nLCAnUG9ydCcpXG4gIC5vcHRpb24oJy1zLCAtLXNlY3JldC1rZXkgPHNlY3JldEtleT4nLCAnU2VjcmV0IGtleScpXG4gIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG52YXIgZ2xvYlNyYywgZmlsZXNTcmMsIGNvbmZpZztcblxuLy8gSWYgLWMsIC0tY29uZmlnIGZpbGUgd2FzIHByb3ZpZGVkXG5pZiAoY29tbWFuZGVyLmNvbmZpZykge1xuICAvLyBXZSdyZSB1c2luZyBgY29tbWFuZGVyYCAoQ0xJKSBhcyB0aGUgc291cmNlIG9mIGFsbCB0cnV0aHMsIGZhbGxpbmcgYmFjayB0b1xuICAvLyB0aGUgYGNvbmZpZ2AgcHJvdmlkZWQgYnkgdGhlIGZpbGUgcGFzc2VkIGFzIGFyZ3VtZW50XG4gIGNvbmZpZyA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKGNvbW1hbmRlci5jb25maWcsICcuJykpO1xufSBlbHNlIHtcbiAgY29uZmlnID0ge307XG59XG5cbmNvbmZpZy5hY2Nlc3NLZXkgPSBjb21tYW5kZXIuYWNjZXNzS2V5IHx8IChjb25maWcua2V5cyA/IGNvbmZpZy5rZXlzLmFjY2Vzc0tleSA6IHZvaWQgMCk7XG5jb25maWcuc2VjcmV0S2V5ID0gY29tbWFuZGVyLnNlY3JldEtleSB8fCAoY29uZmlnLmtleXMgPyBjb25maWcua2V5cy5zZWNyZXRLZXkgOiB2b2lkIDApO1xuY29uZmlnLmhvc3QgPSBjb21tYW5kZXIuaG9zdCB8fCBjb25maWcuaG9zdDtcbmNvbmZpZy5wb3J0ID0gY29tbWFuZGVyLnBvcnQgfHwgY29uZmlnLnBvcnQ7XG5jb25maWcuZmlsZXNEZXN0ID0gY29tbWFuZGVyLm91dHB1dERpciB8fCBjb25maWcuZmlsZXNEZXN0O1xuY29uZmlnLmFwcGxpY2F0aW9uSWQgPSBjb21tYW5kZXIuYXBwbGljYXRpb25JZCB8fCBjb25maWcuYXBwbGljYXRpb25JZDtcblxuY29uZmlnID0gZGVmYXVsdHMoY29uZmlnLCBfY29uZmlnKTtcblxuZ2xvYlNyYyA9IGNvbmZpZy5maWxlc1NyYztcbi8vIElmIHNyYyBwYXRocyBoYXZlIGJlZW4gcHJvdmlkZWRcbmlmIChjb21tYW5kZXIuYXJncy5sZW5ndGggPiAwKSB7XG4gIGdsb2JTcmMgPSBjb21tYW5kZXIuYXJncztcbn1cblxuaWYgKGdsb2JTcmMgJiYgZ2xvYlNyYy5sZW5ndGgpIHtcbiAgZmlsZXNTcmMgPSBbXTtcbiAgLy8gSXRlcmF0ZSBgZ2xvYlNyY2AgdG8gYnVpbGQgYSBsaXN0IG9mIHNvdXJjZSBmaWxlcyBpbnRvIGBmaWxlc1NyY2BcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBnbG9iU3JjLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIC8vIENhbGxpbmcgc3luYyBgZ2xvYmAgYmVjYXVzZSBhc3luYyBpcyBwb2ludGxlc3MgZm9yIHRoZSBDTEkgdXNlIGNhc2VcbiAgICAvLyAoYXMgb2Ygbm93IGF0IGxlYXN0KVxuICAgIGZpbGVzU3JjID0gZmlsZXNTcmMuY29uY2F0KGdsb2Iuc3luYyhnbG9iU3JjW2ldLCB7XG4gICAgICBkb3Q6IHRydWVcbiAgICB9KSk7XG4gIH1cbn1cblxuY29uc3Qge1xuICBhcHBsaWNhdGlvbklkLFxuICBhY2Nlc3NLZXksXG4gIHNlY3JldEtleSxcbiAgZmlsZXNEZXN0LFxuICBob3N0LFxuICBwb3J0XG59ID0gY29uZmlnO1xuXG5jb25zdCBwYXJhbXMgPSBtZXJnZUFuZFBhcnNlUGFyYW1zKGNvbW1hbmRlciwgY29uZmlnLnBhcmFtcyk7XG5cbi8vIEdvLCBnbywgZ29cbihhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgalNjcmFtYmxlclxuICAgICAgLnByb3RlY3RBbmREb3dubG9hZCh7XG4gICAgICAgIGtleXM6IHtcbiAgICAgICAgICBhY2Nlc3NLZXksXG4gICAgICAgICAgc2VjcmV0S2V5XG4gICAgICAgIH0sXG4gICAgICAgIGhvc3QsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIGFwcGxpY2F0aW9uSWQsXG4gICAgICAgIGZpbGVzU3JjLFxuICAgICAgICBmaWxlc0Rlc3QsXG4gICAgICAgIHBhcmFtc1xuICAgICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG59KSgpO1xuIl19
