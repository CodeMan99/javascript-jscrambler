#!/usr/bin/env node

import 'babel-polyfill';

import commander from 'commander';
import defaults from 'lodash.defaults';
import glob from 'glob';
import path from 'path';

import _config from '../lib/config';
import jScrambler from '../lib';
import {mergeAndParseParams} from '../lib/cli';

commander
  .version(require('../../package.json').version)
  .usage('[source files] [options]')
  .option('-c, --config [config]', 'JScrambler configuration options')
  .option('-o, --output [output]', 'Output directory. If not specified the output is printed.')
  .option('-a, --access-key <accessKey>', 'Access key')
  .option('-s, --secret-key <secretKey>', 'Secret key')
  .option('-h, --host [host]', 'Hostname')
  .option('-p, --port [port]', 'Port')
  .option('-i, --applicationId [applicationId]', 'Application ID')
  .parse(process.argv);

var globSrc, config;

// If -c, --config file was provided
if (commander.config) {
  // We're using `commander` (CLI) as the source of all truths, falling back to
  // the `config` provided by the file passed as argument
  config = require(path.resolve(commander.config, '.'));
} else {
  config = {};
}

config.output = commander.output || config.filesDest;
// No need to validate if `keys` are set, later `client` will do so, but first
// will try to load to the configuration through an `rc` file
if (config.keys) {
  config.accessKey = commander.accessKey || config.keys.accessKey;
  config.secretKey = commander.secretKey || config.keys.secretKey;
}
config.host = commander.host || config.host;
config.port = commander.port || config.port;
config.applicationId = commander.applicationId || config.applicationId;
globSrc = config.filesSrc;

config = defaults(config, _config);

// If src paths have been provided
if (commander.args.length > 0) {
  globSrc = commander.args;
}

if (globSrc && globSrc.length) {
  var filesSrc = [];
  // Iterate `globSrc` to build a list of source files into `filesSrc`
  for (let i = 0, l = globSrc.length; i < l; ++i) {
    // Calling sync `glob` because async is pointless for the CLI use case
    // (as of now at least)
    filesSrc = filesSrc.concat(glob.sync(globSrc[i], {
      dot: true
    }));
  }
}

const {
  applicationId,
  output: filesDest,
  accessKey,
  secretKey,
  host,
  port
} = config;

const params = mergeAndParseParams(commander, config.params);

// Go, go, go
(async () => {
  try {
    await jScrambler
      .protectAndDownload({
        keys: {
          accessKey,
          secretKey
        },
        host,
        port,
        applicationId,
        filesSrc,
        filesDest,
        params
      });
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
})();
