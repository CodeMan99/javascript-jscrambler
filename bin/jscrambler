#!/usr/bin/env node
'use strict';

var commander = require('commander');
var glob = require('glob');
var jScrambler = require('../jscrambler');
var path = require('path');

commander
  .version(require('../package.json').version)
  .usage('[source files] [options]')
  .option('-c, --config [config]', 'JScrambler configuration options')
  .option('-o, --output [output]', 'Output directory. If not specified the output is printed.')
  .option('-a, --access-key <accessKey>', 'Access key')
  .option('-s, --secret-key <secretKey>', 'Secret key')
  .option('-h, --host [host]', 'Hostname')
  .option('-p, --port [port]', 'Port')
  .option('-v, --api-version [apiVersion]', 'Version')
  .parse(process.argv);

var filesSrc = [];
var globSrc, params;
if (commander.args.length === 1 && /^.*\.json$/.test(commander.args[0])) {
  var configFile = require(path.resolve(commander.args[0], '.'));
  globSrc = configFile.filesSrc;
  commander.output = configFile.filesDest;
  commander.accessKey = configFile.keys.accessKey;
  commander.secretKey = configFile.keys.secretKey;
  commander.host = configFile.host;
  commander.port = configFile.port;
  commander.apiVersion = configFile.apiVersion;
  params = configFile.params;
} else {
  globSrc = commander.args;
}

if (!commander.accessKey || !commander.secretKey) {
  console.error('Access and secret keys must be provided to engage with the services.');
  process.exit(1);
}

if (!commander.output && filesSrc.length > 1) {
  console.error('Destination must be specified unless only one file is used as input.');
  process.exit(1);
}

for (var i = 0, l = globSrc.length; i < l; ++i) {
  filesSrc = filesSrc.concat(glob.sync(globSrc[i], {dot: true}));
}

var dest = commander.output;
var accessKey = commander.accessKey;
var secretKey = commander.secretKey;
var host = commander.host;
var port = commander.port && parseInt(commander.port);
var apiVersion = commander.apiVersion;

var config;
if (commander.config) {
  config = require(path.resolve(commander.config, '.'));
  config = config.params || config || params || {};
} else {
  config = {};
}
config.files = filesSrc;

var client = new jScrambler.Client({
  accessKey: accessKey,
  secretKey: secretKey,
  host: host,
  port: port,
  apiVersion: apiVersion
});

jScrambler
  .uploadCode(client, config)
  .then(function (res) {
    return jScrambler.downloadCode(client, res.id);
  })
  .then(function (res) {
    if (filesSrc.length === 1 && !dest) {
      dest = function (buffer, file) {
        console.log(buffer.toString());
      }
    }
    return jScrambler.unzipProject(res, dest);
  })
  .fail(function (err) {
    console.error(err);
    process.exit(1);
  });
