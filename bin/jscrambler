#!/usr/bin/env node
'use strict';

var commander = require('commander');
var jScrambler = require('../jscrambler');
var path = require('path');

commander
  .version(require('../package.json').version)
  .usage('[source files] [options]')
  .option('-c, --config [config]', 'JScrambler configuration options')
  .option('-o, --output <output>', 'Output directory. If not specified the output is printed.')
  .option('-a, --access-key <accessKey>', 'Access key')
  .option('-s, --secret-key <secretKey>', 'Secret key')
  .parse(process.argv);

if (!commander.accessKey || !commander.secretKey) {
  console.log(commander.help());
} else if (!commander.output && commander.args.length > 1) {
  console.error('Destination must be specified unless only one file is used as input.');
  console.log(commander.help());
}

var filesSrc = commander.args;
var dest = commander.output;
var accessKey = commander.accessKey;
var secretKey = commander.secretKey;

var config = commander.config && require(path.resolve(commander.config, '.')) || {};
config.files = filesSrc;

var client = new jScrambler.Client({
  accessKey: accessKey,
  secretKey: secretKey
});

jScrambler
  .uploadCode(client, config)
  .then(function (res) {
    return jScrambler.downloadCode(client, res.id);
  })
  .then(function (res) {
    if (filesSrc.length === 1 && !dest) {
      dest = function (buffer, file) {
        console.log(buffer.toString());
      }
    }
    return jScrambler.unzipProject(res, dest);
  })
  .fail(function (err) {
    console.error(err);
    process.exit(1);
  });
